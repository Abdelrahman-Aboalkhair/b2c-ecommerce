generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

enum ORDER_STATUS {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}

enum SECTION_TYPE {
  HERO
  FEATURED_LIST
  CTA
  PROMO
  TESTIMONIAL
}

enum CART_STATUS {
  ACTIVE
  ABANDONED
  CONVERTED
}

model User {
  id                            String    @id @default(uuid())
  googleId                      String?   
  twitterId                     String?   
  facebookId                    String?   
  email                         String    @unique
  password                      String?
  name                          String
  avatar                        String?

  emailVerified                 Boolean
  emailVerificationToken        String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken            String?
  resetPasswordTokenExpiresAt   DateTime?

  role                          ROLE      @default(USER)
  orders                        Order[]
  payments                      Payment[]
  addresses                     Address[]
  interactions                  Interaction[]
  reports                       Report[]
  cart                          Cart?

  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
}

model Product {
  id            String    @id @default(uuid()) 
  name          String @unique
  description   String?
  price         Float
  discount      Float
  slug          String    @unique
  images        String[]
  stock         Int
  salesCount    Int       @default(0)
  sku           String?

  bestSeller    Boolean   @default(false)
  featured      Boolean   @default(false)
  promotional   Boolean   @default(false)  
  newArrival    Boolean   @default(false)  
  averageRating Float     @default(0) 

  category      Category? @relation(fields: [categoryId], references: [id]) 
  categoryId    String?

  orderItems    OrderItem[]
  cartItems     CartItem[]
  interactions  Interaction[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Order {
  id          String    @id @default(uuid()) 
  amount      Float
  orderDate   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id]) 
  userId      String    
  orderItems  OrderItem[]
  payment     Payment?  @relation("OrderPayment")
  address     Address?  @relation("OrderAddress")
  shipment    Shipment? @relation("OrderShipment")
  status      ORDER_STATUS @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid()) 
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int     @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payment {
  id        String  @id @default(uuid()) 
  method    String
  amount    Float

  user      User    @relation(fields: [userId], references: [id]) 
  userId    String  

  order     Order?  @relation("OrderPayment", fields: [orderId], references: [id]) 
  orderId   String? @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        String  @id @default(uuid()) 
  city      String
  state     String
  country   String
  zip       String
  street    String

  user      User    @relation(fields: [userId], references: [id])
  userId    String  

  order     Order?  @relation("OrderAddress", fields: [orderId], references: [id])
  orderId   String? @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


model Shipment {
  id            String    @id @default(uuid()) 
  carrier       String
  trackingNumber String
  shippedDate   DateTime
  deliveryDate  DateTime?
  order         Order     @relation("OrderShipment", fields: [orderId], references: [id])
  orderId       String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model WebhookLog {
  id        String   @id @default(cuid())
  eventType String
  payload   Json
  createdAt DateTime @default(now())
}

model Cart {
  id        String   @id  @default(uuid())

  user      User?     @relation(fields: [userId], references: [id]) 
  userId    String?   @unique

  sessionId String?   @unique
  cartItems CartItem[]

  status    CART_STATUS @default(ABANDONED)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(uuid()) 

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String   

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  quantity  Int      @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([cartId, productId])
}

model Category {
  id        String   @id @default(uuid()) 
  slug      String   @unique
  name      String
  products  Product[] 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Interaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id]) 
  type      String   
  createdAt DateTime @default(now())
}

model Report {
  id        String   @id @default(uuid())
  type      String   
  format    String   
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  parameters Json     
  filePath  String?  
}


model Page {
  id          Int       @id @default(autoincrement())
  slug        String    @unique 
  title       String
  isVisible   Boolean   @default(true) 
  showInNavbar Boolean   @default(true)
  isPublished Boolean   @default(false)
  metaTitle   String?   
  metaDescription String?
  sections    Section[] 
  banners     Banner[]  @relation("PageBanners") 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String   
  type      String?
  content   Json     
  order     Int      
  isVisible Boolean  @default(true)
  pageId    Int
  page      Page     @relation(fields: [pageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement())
  title     String   
  content   Json     
  isVisible Boolean  @default(true)
  pages     Page[]   @relation("PageBanners") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Widget {
  id          Int      @id @default(autoincrement())
  name        String   @unique 
  type        String?   
  config      Json   
  isVisible   Boolean  @default(true) 
  location    String?  
  order       Int?    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Theme {
  id           Int      @id @default(autoincrement())
  name         String   @unique 
  primaryColor String  
  secondaryColor String?
  fontFamily   String?  
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Log {
  id        String   @id @default(uuid())
  level     String   // e.g., "info", "error", "warn", "debug"
  message   String
  context   Json?    // Optional: Additional data (e.g., userId, request details)
  createdAt DateTime @default(now())
}