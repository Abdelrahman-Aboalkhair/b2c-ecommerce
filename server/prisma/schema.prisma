generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

enum TRANSACTION_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELED
  RETURNED
  REFUNDED
}

enum PAYMENT_STATUS {
  PENDING
  PAID
  CANCELED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}


enum CART_STATUS {
  ACTIVE
  ABANDONED
  CONVERTED
}

model User {
  id                              String        @id @default(uuid())
  googleId                        String?
  twitterId                       String?
  facebookId                      String?
  email                           String        @unique
  password                        String?
  name                            String
  avatar                          String?
  emailVerified                   Boolean       @default(false)
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken              String?
  resetPasswordTokenExpiresAt     DateTime?
  role                            ROLE          @default(USER)
  orders                          Order[]
  payments                        Payment[]
  addresses                       Address[]
  interactions                    Interaction[]
  reports                         Report[]
  reviews                         Review[]
  carts                           Cart[] 
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @updatedAt

  @@index([email])
}

model Product {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  price         Float
  discount      Float         @default(0)
  slug          String        @unique
  images        String[]
  stock         Int
  salesCount    Int           @default(0)
  sku           String?
  bestSeller    Boolean       @default(false)
  featured      Boolean       @default(false)
  promotional   Boolean       @default(false)
  newArrival    Boolean       @default(false)
  averageRating Float         @default(0)
  reviewCount   Int           @default(0)
  category      Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?
  orderItems    OrderItem[]
  cartItems     CartItem[]
  interactions  Interaction[]
  reviews       Review[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([name, slug])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int 
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, userId])
}

model Order {
  id          String       @id @default(uuid())
  amount      Float
  orderDate   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  orderItems  OrderItem[]
  payment     Payment?     @relation("OrderPayment")
  address     Address?     @relation("OrderAddress")
  shipment    Shipment?    @relation("OrderShipment")
  transaction Transaction? @relation("OrderTransaction") 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId, productId])
}

model Payment {
  id        String   @id @default(uuid())
  method    String
  amount    Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order?   @relation("OrderPayment", fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?  @unique
  status    PAYMENT_STATUS @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, orderId])
}

model Address {
  id        String   @id @default(uuid())
  city      String
  state     String
  country   String
  zip       String
  street    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order?   @relation("OrderAddress", fields: [orderId], references: [id], onDelete: SetNull)
  orderId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, orderId])
}

model Shipment {
  id             String    @id @default(uuid())
  carrier        String
  trackingNumber String
  shippedDate    DateTime
  deliveryDate   DateTime?
  order          Order     @relation("OrderShipment", fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([orderId])
}

model Transaction {
  id              String       @id @default(uuid())
  order           Order        @relation("OrderTransaction", fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String       @unique 
  amount          Float
  status          TRANSACTION_STATUS @default(PENDING) 
  paymentMethod   String
  transactionDate DateTime     @default(now())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  @@index([orderId])
}

model Cart {
  id        String      @id @default(uuid())
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String? 
  sessionId String?     @unique
  cartItems CartItem[]
  status    CART_STATUS @default(ABANDONED)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId, sessionId])
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId, productId])
}

model Category {
  id          String    @id @default(uuid())
  slug        String    @unique
  name        String
  description String? // Added to support DashboardSearchBar filtering
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([name, slug])
}

model Interaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  type      String
  createdAt DateTime @default(now())

  @@index([userId, productId])
}

model Report {
  id         String   @id @default(uuid())
  type       String
  format     String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  parameters Json
  filePath   String?

  @@index([userId])
}


model Log {
  id        String   @id @default(uuid())
  level     String   // e.g., "info", "error", "warn", "debug"
  message   String
  context   Json?    // Optional: Additional data (e.g., userId, request details)
  createdAt DateTime @default(now())
}