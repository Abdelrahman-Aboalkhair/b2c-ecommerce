generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

model User {
  id        String    @id @default(uuid()) 
  googleId  String?
  email     String    @unique
  password  String
  name      String
  avatar    String?
  
  emailVerified Boolean
  emailVerificationToken String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken String?
  resetPasswordTokenExpiresAt DateTime?

  role      ROLE      @default(USER)
  orders    Order[]
  payments  Payment[]
  addresses Address[]
  cart      Cart?    

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String    @id @default(uuid()) 
  name         String
  description  String?
  price        Float
  discount     Float
  slug         String    @unique
  images       String[]
  stock        Int
  salesCount   Int @default(0)

  bestSeller   Boolean @default(false)
  featured     Boolean @default(false)
  promotional  Boolean @default(false)  
  newArrival   Boolean @default(false)  
  ratings      Float  @default(0)
  averageRating Float @default(0)

  category     Category? @relation(fields: [categoryId], references: [id]) 
  categoryId   String?

  orderItems   OrderItem[]
  cartItems    CartItem[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Order {
  id          String    @id @default(uuid()) 
  amount      Float
  orderDate   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id]) 
  userId      String    

  orderItems  OrderItem[]
  tracking    TrackingDetail?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid()) 
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int     @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payment {
  id        String  @id @default(uuid()) 
  method    String
  amount    Float
  user      User    @relation(fields: [userId], references: [id]) 
  userId    String  

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        String  @id @default(uuid()) 
  city      String
  state     String
  country   String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TrackingDetail {
  id        String  @id @default(uuid()) 
  status    String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @unique 

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id        String   @id @default(uuid()) 
  user      User?     @relation(fields: [userId], references: [id]) 
  userId    String?   @unique
  cartItems CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String   @id @default(uuid()) 
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([cartId, productId]) // Ensures unique product per cart
}

model Category {
  id        String  @id @default(uuid()) 
  slug      String  @unique
  name      String
  products  Product[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
